description: |
  Send a Slack direct message to the PR author, or to a channel, @mentioning the PR author.
  Requires `SLACK_OAUTH_TOKEN` to be set as an environment variable.

  For more details, see https://github.com/NarrativeScience/circleci-orb-ghpr#enabling-slack-notifications
parameters:
  message:
    description: |
      The message to send.
      Supports Slack mrkdown syntax - https://api.slack.com/reference/surfaces/formatting#basics
    type: string
  color:
    description: |
      The color to format the message with.
      Should be a hex value wrapped in quotes because we're in YAML land.
    type: string
    default: "#FFFFF"
  when:
    description: Condition for when the message should be sent.
    type: enum
    enum:
      - on_success
      - on_fail
      - always
    default: on_success
  channel:
    description: |
      Optional channel to send a message to, ex. `#some-channel`.
      If provided, will message the channel but @mention the PR author.
      Otherwise, the message is sent to the PR author directly.
    type: string
    default: ""
  get_slack_user_by:
    description: |
      The mechanism by which to find the PR author's associated Slack user ID:

        `email` - Find a Slack user with the same email address as GITHUB_PR_AUTHOR_EMAIL.
        `display_name` - Find a Slack user with their Slack profile name, i.e. "Display name",
            exactly equal to GITHUB_PR_AUTHOR_USERNAME. First match only.
        `real_name` - Find a Slack user with their Slack profile real_name field,
            i.e. "Full name", exactly equal to GITHUB_PR_AUTHOR_NAME. Fist match only.
        `title_tag` - Find a Slack user with a Slack profile title field, i.e. "What I do",
            containing the string "[gh:GITHUB_PR_AUTHOR_USERNAME]". First match only.
        `meseeks` - Try to employ all the mechanisms above, in order, to find a Slack user.
    type: enum
    enum:
      - email
      - display_name
      - real_name
      - title_tag
      - meseeks
    default: email
  on_fail:
    description: |
      How the command should exit if anything fails. Ultimately, sending a Slack message
      is a nice-to-have, but setting this to `fail` is a way to enforce enabling Slack
      messages. An example scenario where it would be useful is if messages are sent to
      a channel and the PR author should be tagged to get their attention.
    type: enum
    enum:
      - fail
      - pass
    default: pass
steps:
  - run:
      name: Slack PR author
      when: << parameters.when >>
      command: |
        # Check `jq` dependency
        if ! (command -v jq >/dev/null 2>&1); then
          echo "This command requires jq to be installed"
          exit 1
        fi

        # Check `SLACK_OAUTH_TOKEN` is set
        if [[ -z ${SLACK_OAUTH_TOKEN+x} ]]; then
          echo "This command requires SLACK_OAUTH_TOKEN to be set"
          exit 1
        fi

        SLACK_USER_ID=""

        if [[ \
          ("<< parameters.get_slack_user_by >>" == "email" \
          || "<< parameters.get_slack_user_by >>" ==  "meseeks") \
          # && -z "$SLACK_USER_ID" \
        ]]; then

          if [[ -z ${GITHUB_PR_AUTHOR_EMAIL+x} && "<< parameters.get_slack_user_by >>" !=  "meseeks" ]]; then
            echo "GITHUB_PR_AUTHOR_EMAIL not set"
            exit 1
          fi

          SLACK_USER=$(curl \
            -H 'Content-Type: application/x-www-form-urlencoded' \
            -H 'Cache-Control: no-cache' \
            -d "token=$SLACK_OAUTH_TOKEN" \
            -d "email=$GITHUB_PR_AUTHOR_EMAIL" \
            "https://slack.com/api/users.lookupByEmail")
          SLACK_USER_ID=$(echo $SLACK_USER | jq -r '.user.id' | tr -d '"')
          echo "SLACK_USER_ID by email: $SLACK_USER_ID"

        else
           curl \
              -H 'Content-Type: application/x-www-form-urlencoded' \
              -H 'Cache-Control: no-cache' \
              -d "token=$SLACK_OAUTH_TOKEN" \
              "https://slack.com/api/users.list" > /tmp/slack-users.json
        fi

        if [[ \
          ("<< parameters.get_slack_user_by >>" == "display_name" \
          || "<< parameters.get_slack_user_by >>" ==  "meseeks") \
          # && -z "$SLACK_USER_ID" \
        ]]; then

          if [[ -z ${GITHUB_PR_AUTHOR_USERNAME+x}  && "<< parameters.get_slack_user_by >>" !=  "meseeks" ]]; then
            echo "GITHUB_PR_AUTHOR_USERNAME not set"
            exit 1
          fi

          SLACK_USER_ID=$(jq -r '.members | .[] | select(.profile.display_name=="$GITHUB_PR_AUTHOR_USERNAME") | .id' /tmp/slack-users.json)
          echo "SLACK_USER_ID by display_name: $SLACK_USER_ID"
        fi

        if [[ \
          ("<< parameters.get_slack_user_by >>" == "real_name" \
          || "<< parameters.get_slack_user_by >>" ==  "meseeks") \
          # && -z "$SLACK_USER_ID" \
        ]]; then

          if [[ -z ${GITHUB_PR_AUTHOR_NAME+x}  && "<< parameters.get_slack_user_by >>" !=  "meseeks" ]]; then
            echo "GITHUB_PR_AUTHOR_NAME not set"
            exit 1
          fi

          SLACK_USER_ID=$(jq -r '.members | .[] | select(.profile.real_name=="$GITHUB_PR_AUTHOR_NAME") | .id' /tmp/slack-users.json)
          echo "SLACK_USER_ID by real_name: $SLACK_USER_ID"
        fi

        if [[ \
          ("<< parameters.get_slack_user_by >>" == "title_tag" \
          || "<< parameters.get_slack_user_by >>" ==  "meseeks") \
          # && -z "$SLACK_USER_ID" \
        ]]; then

          if [[ -z ${GITHUB_PR_AUTHOR_USERNAME+x}  && "<< parameters.get_slack_user_by >>" !=  "meseeks" ]]; then
            echo "GITHUB_PR_AUTHOR_USERNAME not set"
            exit 1
          fi

          SLACK_TITLE_MATCH_STRING="\[gh:$GITHUB_PR_AUTHOR_USERNAME\]"
          SLACK_USER_ID="$(
            jq -r --arg u "$SLACK_TITLE_MATCH_STRING" '.members | .[] | select(.profile.title | match($u)) | .id' /tmp/slack-users.json)"
          echo "SLACK_USER_ID by title_tag: $SLACK_USER_ID"
        fi
